import { api, CreateMedicineSubmissionRequest, MedicineItem, SchoolNurse } from '@/lib/api'
import { Ionicons } from '@expo/vector-icons'
import DateTimePicker from '@react-native-community/datetimepicker'
import { router } from 'expo-router'
import React, { useEffect, useState } from 'react'
import {
    Alert,
    FlatList,
    KeyboardAvoidingView,
    Modal,
    Platform,
    SafeAreaView,
    ScrollView,
    StyleSheet,
    Text,
    TextInput,
    TouchableOpacity,
    View,
} from 'react-native'

// Import auth context (gi·∫£ s·ª≠ b·∫°n c√≥)
import { useAuth } from '@/lib/auth'

export default function CreateMedicineScreen() {
  const [loading, setLoading] = useState(false)
  const [loadingNurses, setLoadingNurses] = useState(false)
  const [loadingUserData, setLoadingUserData] = useState(true)
  const [showNurseModal, setShowNurseModal] = useState(false)
  const [schoolNurses, setSchoolNurses] = useState<SchoolNurse[]>([])
  const [selectedNurse, setSelectedNurse] = useState<SchoolNurse | null>(null)
  const [nurseSearchQuery, setNurseSearchQuery] = useState('')
  const { user } = useAuth()
  
  // Th√™m c√°c state n√†y
  const [userProfile, setUserProfile] = useState<any>(null)
  const [studentData, setStudentData] = useState<any>(null)
  
  const [medicine, setMedicine] = useState<MedicineItem>({
    name: '',
    dosage: '',
    usageInstructions: '',
    quantity: 1,
    timesPerDay: 1,
    timeSlots: ['08:00'],
    startDate: new Date().toISOString().split('T')[0],
    endDate: '',
    note: '',
    reason: ''
  })
  
  const [showStartDatePicker, setShowStartDatePicker] = useState(false)
  const [showEndDatePicker, setShowEndDatePicker] = useState(false)

  // C·∫≠p nh·∫≠t useEffect ƒë·ªÉ load c·∫£ nurses v√† user data
  useEffect(() => {
    loadUserAndStudentData()
    loadSchoolNurses()
  }, [])

  // Th√™m h√†m n√†y
  const loadUserAndStudentData = async () => {
    try {
      setLoadingUserData(true)
      console.log('üîÑ Loading user and student data...')
      
      // Load user profile
      const userProfileResponse = await api.getCurrentUser()
      const profile = userProfileResponse.data || userProfileResponse
      setUserProfile(profile)
      console.log('‚úÖ User profile loaded:', profile)
      
      // Load student data n·∫øu c√≥ studentIds
      if (profile.studentIds && profile.studentIds.length > 0) {
        const studentId = profile.studentIds[0] // L·∫•y student ƒë·∫ßu ti√™n
        console.log('üìö Loading student data for ID:', studentId)
        
        const studentResponse = await api.getStudentById(studentId)
        const student = studentResponse.data || studentResponse
        setStudentData(student)
        console.log('‚úÖ Student data loaded:', student)
      } else {
        console.log('‚ùå No studentIds found in profile')
        Alert.alert('L·ªói', 'Kh√¥ng t√¨m th·∫•y th√¥ng tin h·ªçc sinh trong t√†i kho·∫£n c·ªßa b·∫°n.')
      }
    } catch (error) {
      console.error('‚ùå Failed to load user/student data:', error)
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i.')
    } finally {
      setLoadingUserData(false)
    }
  }

  const loadSchoolNurses = async (query?: string) => {
    try {
      setLoadingNurses(true)
      const response = await api.searchSchoolNurses(1, 20, query)
      setSchoolNurses(response.pageData)
      
      // T·ª± ƒë·ªông ch·ªçn nurse ƒë·∫ßu ti√™n n·∫øu ch∆∞a c√≥ nurse n√†o ƒë∆∞·ª£c ch·ªçn
      if (!selectedNurse && response.pageData.length > 0) {
        setSelectedNurse(response.pageData[0])
      }
    } catch (error) {
      console.error('Load school nurses error:', error)
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch y t√° tr∆∞·ªùng')
    } finally {
      setLoadingNurses(false)
    }
  }

  const handleNurseSearch = (query: string) => {
    setNurseSearchQuery(query)
    if (query.trim()) {
      loadSchoolNurses(query)
    } else {
      loadSchoolNurses()
    }
  }

  const selectNurse = (nurse: SchoolNurse) => {
    setSelectedNurse(nurse)
    setShowNurseModal(false)
  }

  const handleTimeSlotChange = (index: number, value: string) => {
    const newTimeSlots = [...medicine.timeSlots]
    newTimeSlots[index] = value
    setMedicine({ ...medicine, timeSlots: newTimeSlots })
  }

  const addTimeSlot = () => {
    if (medicine.timeSlots.length < 6) {
      setMedicine({
        ...medicine,
        timeSlots: [...medicine.timeSlots, '12:00']
      })
    }
  }

  const removeTimeSlot = (index: number) => {
    if (medicine.timeSlots.length > 1) {
      const newTimeSlots = medicine.timeSlots.filter((_, i) => i !== index)
      setMedicine({ ...medicine, timeSlots: newTimeSlots })
    }
  }

  const handleSubmit = async () => {
    console.log('üöÄ Submit button pressed!')
    
    // Validation
    if (!medicine.name.trim()) {
      Alert.alert('L·ªói', 'Vui l√≤ng nh·∫≠p t√™n thu·ªëc')
      return
    }
    
    if (!medicine.endDate) {
      Alert.alert('L·ªói', 'Vui l√≤ng ch·ªçn ng√†y k·∫øt th√∫c')
      return
    }

    if (new Date(medicine.endDate) <= new Date(medicine.startDate)) {
      Alert.alert('L·ªói', 'Ng√†y k·∫øt th√∫c ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu')
      return
    }

    if (!selectedNurse) {
      Alert.alert('L·ªói', 'Vui l√≤ng ch·ªçn y t√° tr∆∞·ªùng')
      return
    }

    // Ki·ªÉm tra c√≥ th√¥ng tin user v√† student kh√¥ng - S·ª¨A L·∫†I ƒêI·ªÄU KI·ªÜN
    console.log('üîç Checking data:', {
      userProfileId: userProfile?._id,
      studentDataId: studentData?._id,
      userProfile: userProfile,
      studentData: studentData
    })
    
    if (!userProfile?._id || !studentData?._id) {
      console.log('‚ùå Missing data - userProfile:', userProfile, 'studentData:', studentData)
      Alert.alert('L·ªói', 'Kh√¥ng t√¨m th·∫•y th√¥ng tin h·ªçc sinh. Vui l√≤ng th·ª≠ t·∫£i l·∫°i trang.')
      return
    }

    setLoading(true)
    
    try {
      const request: CreateMedicineSubmissionRequest = {
        parentId: userProfile._id,
        studentId: studentData._id,
        schoolNurseId: selectedNurse._id,
        medicines: [medicine]
      }
      
      console.log('üíä Creating medicine submission:', request)
      console.log('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Parent ID:', userProfile._id)
      console.log('üë∂ Student ID:', studentData._id)
      console.log('üë©‚Äç‚öïÔ∏è Nurse ID:', selectedNurse._id)
      
      const response = await api.createMedicineSubmission(request)
      console.log('üìã API Response:', response)
      
      if (response.success) {
        Alert.alert(
          'Th√†nh c√¥ng',
          `ƒê∆°n thu·ªëc cho ${studentData.fullName} ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng. Y t√° tr∆∞·ªùng s·∫Ω xem x√©t v√† ph√™ duy·ªát.`,
          [
            {
              text: 'OK',
              onPress: () => router.back()
            }
          ]
        )
      } else {
        Alert.alert('L·ªói', response.message || 'C√≥ l·ªói x·∫£y ra khi t·∫°o ƒë∆°n thu·ªëc')
      }
    } catch (error: any) {
      console.error('‚ùå Create medicine submission error:', error)
      Alert.alert('L·ªói', error.message || 'C√≥ l·ªói x·∫£y ra khi t·∫°o ƒë∆°n thu·ªëc')
    } finally {
      setLoading(false)
    }
  }

  const renderNurseItem = ({ item }: { item: SchoolNurse }) => (
    <TouchableOpacity
      style={[
        styles.nurseItem,
        selectedNurse?._id === item._id && styles.selectedNurseItem
      ]}
      onPress={() => selectNurse(item)}
    >
      <View style={styles.nurseInfo}>
        <Text style={styles.nurseName}>{item.fullName}</Text>
        <Text style={styles.nurseEmail}>{item.email}</Text>
        <Text style={styles.nursePhone}>{item.phone}</Text>
      </View>
      {selectedNurse?._id === item._id && (
        <Ionicons name="checkmark-circle" size={24} color="#4CAF50" />
      )}
    </TouchableOpacity>
  )

  return (
    <SafeAreaView style={styles.container}>
      <KeyboardAvoidingView 
        style={styles.container} 
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      >
        <ScrollView style={styles.content}>
          {/* Hi·ªÉn th·ªã th√¥ng tin h·ªçc sinh */}
          {studentData && (
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>Th√¥ng tin h·ªçc sinh</Text>
              <View style={styles.studentInfo}>
                <Text style={styles.studentName}>{studentData.fullName}</Text>
                <Text style={styles.studentDetails}>
                  L·ªõp: {studentData.classInfo?.name || 'N/A'} ‚Ä¢ M√£ HS: {studentData.studentCode}
                </Text>
              </View>
            </View>
          )}
          
          {/* Ch·ªçn y t√° tr∆∞·ªùng */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Y t√° tr∆∞·ªùng ph·ª• tr√°ch</Text>
            
            <TouchableOpacity 
              style={styles.nurseSelector}
              onPress={() => setShowNurseModal(true)}
            >
              <View style={styles.nurseSelectorContent}>
                {selectedNurse ? (
                  <View>
                    <Text style={styles.selectedNurseName}>{selectedNurse.fullName}</Text>
                    <Text style={styles.selectedNurseEmail}>{selectedNurse.email}</Text>
                  </View>
                ) : (
                  <Text style={styles.nursePlaceholder}>Ch·ªçn y t√° tr∆∞·ªùng</Text>
                )}
              </View>
              <Ionicons name="chevron-down" size={20} color="#666" />
            </TouchableOpacity>
          </View>

          {/* Th√¥ng tin thu·ªëc */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Th√¥ng tin thu·ªëc</Text>
            
            <View style={styles.inputGroup}>
              <Text style={styles.label}>T√™n thu·ªëc *</Text>
              <TextInput
                style={styles.input}
                value={medicine.name}
                onChangeText={(text) => setMedicine({ ...medicine, name: text })}
                placeholder="Nh·∫≠p t√™n thu·ªëc"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.label}>Li·ªÅu l∆∞·ª£ng</Text>
              <TextInput
                style={styles.input}
                value={medicine.dosage}
                onChangeText={(text) => setMedicine({ ...medicine, dosage: text })}
                placeholder="V√≠ d·ª•: 1 vi√™n, 5ml"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.label}>H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</Text>
              <TextInput
                style={styles.input}
                value={medicine.usageInstructions}
                onChangeText={(text) => setMedicine({ ...medicine, usageInstructions: text })}
                placeholder="V√≠ d·ª•: U·ªëng sau ƒÉn"
              />
            </View>

            <View style={styles.row}>
              <View style={[styles.inputGroup, { flex: 1, marginRight: 8 }]}>
                <Text style={styles.label}>S·ªë l∆∞·ª£ng</Text>
                <TextInput
                  style={styles.input}
                  value={medicine.quantity.toString()}
                  onChangeText={(text) => setMedicine({ ...medicine, quantity: parseInt(text) || 0 })}
                  keyboardType="numeric"
                  placeholder="10"
                />
              </View>
              
              <View style={[styles.inputGroup, { flex: 1, marginLeft: 8 }]}>
                <Text style={styles.label}>S·ªë l·∫ßn/ng√†y</Text>
                <TextInput
                  style={styles.input}
                  value={medicine.timesPerDay.toString()}
                  onChangeText={(text) => {
                    const times = parseInt(text) || 1
                    const defaultTimes = {
                      1: ['08:00'],
                      2: ['08:00', '20:00'],
                      3: ['08:00', '12:00', '20:00'],
                      4: ['08:00', '12:00', '16:00', '20:00'],
                      5: ['08:00', '11:00', '14:00', '17:00', '20:00'],
                      6: ['08:00', '10:00', '12:00', '14:00', '16:00', '20:00']
                    }
                    
                    setMedicine({
                      ...medicine,
                      timesPerDay: times,
                      timeSlots: defaultTimes[times as keyof typeof defaultTimes] || ['08:00']
                    })
                  }}
                  keyboardType="numeric"
                  placeholder="3"
                />
              </View>
            </View>
          </View>

          {/* Th·ªùi gian u·ªëng thu·ªëc */}
          <View style={styles.section}>
            <View style={styles.sectionHeader}>
              <Text style={styles.sectionTitle}>Th·ªùi gian u·ªëng thu·ªëc</Text>
              {medicine.timeSlots.length < 6 && (
                <TouchableOpacity onPress={addTimeSlot} style={styles.addButton}>
                  <Ionicons name="add" size={20} color="#4CAF50" />
                </TouchableOpacity>
              )}
            </View>
            
            {medicine.timeSlots.map((time, index) => (
              <View key={index} style={styles.timeSlotRow}>
                <Text style={styles.timeLabel}>L·∫ßn {index + 1}:</Text>
                <TextInput
                  style={styles.timeInput}
                  value={time}
                  onChangeText={(text) => handleTimeSlotChange(index, text)}
                  placeholder="HH:MM"
                />
                {medicine.timeSlots.length > 1 && (
                  <TouchableOpacity 
                    onPress={() => removeTimeSlot(index)}
                    style={styles.removeButton}
                  >
                    <Ionicons name="remove-circle" size={24} color="#f44336" />
                  </TouchableOpacity>
                )}
              </View>
            ))}
          </View>

          {/* Th·ªùi gian ƒëi·ªÅu tr·ªã */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Th·ªùi gian ƒëi·ªÅu tr·ªã</Text>
            
            <View style={styles.row}>
              <View style={[styles.inputGroup, { flex: 1, marginRight: 8 }]}>
                <Text style={styles.label}>Ng√†y b·∫Øt ƒë·∫ßu</Text>
                <TouchableOpacity 
                  style={styles.dateInput}
                  onPress={() => setShowStartDatePicker(true)}
                >
                  <Text style={styles.dateText}>{medicine.startDate}</Text>
                  <Ionicons name="calendar" size={20} color="#666" />
                </TouchableOpacity>
              </View>
              
              <View style={[styles.inputGroup, { flex: 1, marginLeft: 8 }]}>
                <Text style={styles.label}>Ng√†y k·∫øt th√∫c *</Text>
                <TouchableOpacity 
                  style={styles.dateInput}
                  onPress={() => setShowEndDatePicker(true)}
                >
                  <Text style={[styles.dateText, !medicine.endDate && styles.placeholder]}>
                    {medicine.endDate || 'Ch·ªçn ng√†y'}
                  </Text>
                  <Ionicons name="calendar" size={20} color="#666" />
                </TouchableOpacity>
              </View>
            </View>
          </View>

          {/* Ghi ch√∫ */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Ghi ch√∫ v√† l√Ω do</Text>
            
            <View style={styles.inputGroup}>
              <Text style={styles.label}>Ghi ch√∫</Text>
              <TextInput
                style={[styles.input, styles.textArea]}
                value={medicine.note}
                onChangeText={(text) => setMedicine({ ...medicine, note: text })}
                placeholder="Ghi ch√∫ th√™m v·ªÅ c√°ch s·ª≠ d·ª•ng thu·ªëc"
                multiline
                numberOfLines={3}
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.label}>L√Ω do s·ª≠ d·ª•ng</Text>
              <TextInput
                style={[styles.input, styles.textArea]}
                value={medicine.reason}
                onChangeText={(text) => setMedicine({ ...medicine, reason: text })}
                placeholder="L√Ω do c·∫ßn s·ª≠ d·ª•ng thu·ªëc n√†y"
                multiline
                numberOfLines={3}
              />
            </View>
          </View>

          {/* N√∫t submit */}
          <View style={styles.buttonContainer}>
            <TouchableOpacity 
              style={[styles.submitButton, loading && styles.disabledButton]}
              onPress={handleSubmit}
              disabled={loading}
            >
              <Text style={styles.submitButtonText}>
                {loading ? 'ƒêang t·∫°o...' : 'T·∫°o ƒë∆°n thu·ªëc'}
              </Text>
            </TouchableOpacity>
          </View>
        </ScrollView>

        {/* Modal ch·ªçn y t√° */}
        <Modal
          visible={showNurseModal}
          animationType="slide"
          presentationStyle="pageSheet"
        >
          <SafeAreaView style={styles.modalContainer}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>Ch·ªçn y t√° tr∆∞·ªùng</Text>
              <TouchableOpacity
                onPress={() => setShowNurseModal(false)}
                style={styles.closeButton}
              >
                <Ionicons name="close" size={24} color="#666" />
              </TouchableOpacity>
            </View>
            
            <View style={styles.searchContainer}>
              <TextInput
                style={styles.searchInput}
                value={nurseSearchQuery}
                onChangeText={handleNurseSearch}
                placeholder="T√¨m ki·∫øm y t√° theo t√™n, email..."
              />
              <Ionicons name="search" size={20} color="#666" style={styles.searchIcon} />
            </View>
            
            {loadingNurses ? (
              <View style={styles.loadingContainer}>
                <Text>ƒêang t·∫£i...</Text>
              </View>
            ) : (
              <FlatList
                data={schoolNurses}
                renderItem={renderNurseItem}
                keyExtractor={(item) => item._id}
                style={styles.nurseList}
                showsVerticalScrollIndicator={false}
              />
            )}
          </SafeAreaView>
        </Modal>

        {/* Date Pickers */}
        {showStartDatePicker && (
          <DateTimePicker
            value={new Date(medicine.startDate)}
            mode="date"
            display="default"
            onChange={(event, selectedDate) => {
              setShowStartDatePicker(false)
              if (selectedDate) {
                setMedicine({ 
                  ...medicine, 
                  startDate: selectedDate.toISOString().split('T')[0] 
                })
              }
            }}
          />
        )}

        {showEndDatePicker && (
          <DateTimePicker
            value={medicine.endDate ? new Date(medicine.endDate) : new Date()}
            mode="date"
            display="default"
            minimumDate={new Date(medicine.startDate)}
            onChange={(event, selectedDate) => {
              setShowEndDatePicker(false)
              if (selectedDate) {
                setMedicine({ 
                  ...medicine, 
                  endDate: selectedDate.toISOString().split('T')[0] 
                })
              }
            }}
          />
        )}
      </KeyboardAvoidingView>
    </SafeAreaView>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  content: {
    flex: 1,
  },
  section: {
    backgroundColor: '#fff',
    margin: 16,
    padding: 16,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
    marginBottom: 16,
  },
  // Nurse selector styles
  nurseSelector: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 12,
    backgroundColor: '#fff',
  },
  nurseSelectorContent: {
    flex: 1,
  },
  selectedNurseName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
  },
  selectedNurseEmail: {
    fontSize: 14,
    color: '#666',
    marginTop: 2,
  },
  nursePlaceholder: {
    fontSize: 16,
    color: '#999',
  },
  // Modal styles
  modalContainer: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
  },
  closeButton: {
    padding: 4,
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    margin: 16,
    backgroundColor: '#fff',
    borderRadius: 8,
    paddingHorizontal: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  searchInput: {
    flex: 1,
    paddingVertical: 12,
    fontSize: 16,
  },
  searchIcon: {
    marginLeft: 8,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  nurseList: {
    flex: 1,
  },
  nurseItem: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#fff',
    marginHorizontal: 16,
    marginVertical: 4,
    padding: 16,
    borderRadius: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  selectedNurseItem: {
    borderColor: '#4CAF50',
    borderWidth: 2,
  },
  nurseInfo: {
    flex: 1,
  },
  nurseName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
  },
  nurseEmail: {
    fontSize: 14,
    color: '#666',
    marginTop: 2,
  },
  nursePhone: {
    fontSize: 14,
    color: '#666',
    marginTop: 2,
  },
  // Existing styles...
  inputGroup: {
    marginBottom: 16,
  },
  label: {
    fontSize: 14,
    fontWeight: '500',
    color: '#333',
    marginBottom: 8,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 10,
    fontSize: 16,
    backgroundColor: '#fff',
  },
  textArea: {
    height: 80,
    textAlignVertical: 'top',
  },
  row: {
    flexDirection: 'row',
  },
  timeSlotRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  timeLabel: {
    fontSize: 14,
    color: '#666',
    width: 60,
  },
  timeInput: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 8,
    fontSize: 16,
    marginRight: 8,
  },
  addButton: {
    padding: 4,
  },
  removeButton: {
    padding: 4,
  },
  dateInput: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 10,
    backgroundColor: '#fff',
  },
  dateText: {
    fontSize: 16,
    color: '#333',
  },
  placeholder: {
    color: '#999',
  },
  buttonContainer: {
    padding: 16,
  },
  submitButton: {
    backgroundColor: '#4CAF50',
    paddingVertical: 16,
    borderRadius: 8,
    alignItems: 'center',
  },
  disabledButton: {
    backgroundColor: '#ccc',
  },
  submitButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
})

const medicinePresets = [
  {
    name: 'Paracetamol',
    dosage: '1 vi√™n',
    usageInstructions: 'U·ªëng sau ƒÉn',
    timesPerDay: 3,
    timeSlots: ['08:00', '12:00', '20:00']
  },
  {
    name: 'Vitamin C',
    dosage: '1 vi√™n',
    usageInstructions: 'U·ªëng sau ƒÉn',
    timesPerDay: 1,
    timeSlots: ['08:00']
  },
  {
    name: 'Thu·ªëc ho',
    dosage: '5ml',
    usageInstructions: 'U·ªëng khi ho',
    timesPerDay: 2,
    timeSlots: ['08:00', '20:00']
  }
]

const applyPreset = (preset: any) => {
  setMedicine({
    ...medicine,
    ...preset,
    quantity: medicine.quantity // Gi·ªØ nguy√™n s·ªë l∆∞·ª£ng
  })
}

const commonDosages = ['1 vi√™n', '2 vi√™n', '5ml', '10ml', '1 g√≥i', '1/2 vi√™n']
const commonInstructions = [
  'U·ªëng sau ƒÉn',
  'U·ªëng tr∆∞·ªõc ƒÉn',
  'U·ªëng khi ƒë√≥i',
  'U·ªëng khi c·∫ßn thi·∫øt',
  'U·ªëng tr∆∞·ªõc khi ng·ªß'
]
const commonReasons = [
  'S·ªët',
  'ƒêau ƒë·∫ßu',
  'Ho',
  'C·∫£m l·∫°nh',
  'ƒêau b·ª•ng',
  'B·ªï sung vitamin'
]
{/* Preset Selection */}
<View style={styles.section}>
  <Text style={styles.sectionTitle}>Ch·ªçn m·∫´u c√≥ s·∫µn (t√πy ch·ªçn)</Text>
  <ScrollView horizontal showsHorizontalScrollIndicator={false}>
    {medicinePresets.map((preset, index) => (
      <TouchableOpacity
        key={index}
        style={styles.presetCard}
        onPress={() => applyPreset(preset)}
      >
        <Text style={styles.presetName}>{preset.name}</Text>
        <Text style={styles.presetDetails}>{preset.dosage} - {preset.timesPerDay} l·∫ßn/ng√†y</Text>
      </TouchableOpacity>
    ))}
  </ScrollView>
</View>

const handleMedicineNameChange = (name: string) => {
  setMedicine({ ...medicine, name })
  
  // Auto-suggest based on medicine name
  const lowerName = name.toLowerCase()
  if (lowerName.includes('paracetamol') || lowerName.includes('acetaminophen')) {
    setMedicine(prev => ({
      ...prev,
      name,
      dosage: prev.dosage || '1 vi√™n',
      usageInstructions: prev.usageInstructions || 'U·ªëng sau ƒÉn',
      timesPerDay: prev.timesPerDay || 3
    }))
  }
  // Th√™m c√°c logic t∆∞∆°ng t·ª± cho c√°c lo·∫°i thu·ªëc kh√°c
}